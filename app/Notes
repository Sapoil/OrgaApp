Pour quitter le AssTaskFragment, le comportement est √©trange lorsque l'on a ouvert d'autres activity (le add task est toujours ferm√© en dernier...)

Pour ajouter une m√©thode `@Query` avec un param√®tre dans votre DAO, vous devez d√©finir la requ√™te SQL et utiliser des **param√®tres nomm√©s ou positionnels** pour passer les valeurs dynamiquement. Room les remplacera automatiquement au moment de l'ex√©cution.

Voici comment proc√©der :

---

### **Exemple : Ajouter une Query avec un param√®tre dans DAO**

#### 1. M√©thode DAO avec un param√®tre unique
Voici un exemple o√π vous r√©cup√©rez toutes les t√¢ches associ√©es √† un ID d'organisation donn√©.

```kotlin
@Dao
interface TaskDao {
    @Query("SELECT * FROM tasks WHERE orgId = :organizationId")
    fun getTasksByOrganization(organizationId: Int): List<Task>
}
```

- **`:organizationId`** est un param√®tre nomm√© dans la requ√™te.
- Le param√®tre `organizationId` sera remplac√© par la valeur que vous passez √† la m√©thode.

#### Utilisation :
```kotlin
val tasks = database.taskDao().getTasksByOrganization(1)
tasks.forEach { task ->
    println("Task: ${task.title}")
}
```

---

#### 2. M√©thode DAO avec plusieurs param√®tres
Si vous devez filtrer par plusieurs crit√®res, ajoutez plusieurs param√®tres √† la requ√™te.

##### Exemple :
```kotlin
@Dao
interface TaskDao {
    @Query("SELECT * FROM tasks WHERE orgId = :organizationId AND importance = :importanceLevel")
    fun getTasksByOrgAndImportance(organizationId: Int, importanceLevel: Int): List<Task>
}
```

#### Utilisation :
```kotlin
val tasks = database.taskDao().getTasksByOrgAndImportance(1, 5)
tasks.forEach { task ->
    println("Task: ${task.title}")
}
```

---

### **Utilisation avec des param√®tres facultatifs**
Pour ajouter une flexibilit√© (par exemple, un filtre facultatif), vous pouvez construire une requ√™te dynamique en utilisant SQL.

#### Exemple : Ajouter un param√®tre facultatif
```kotlin
@Dao
interface TaskDao {
    @Query("SELECT * FROM tasks WHERE (:organizationId IS NULL OR orgId = :organizationId)")
    fun getTasksByOrganization(organizationId: Int?): List<Task>
}
```

- Si `organizationId` est `null`, la condition sera ignor√©e.

#### Utilisation :
```kotlin
// Exemple sans filtre d'organisation
val allTasks = database.taskDao().getTasksByOrganization(null)

// Exemple avec filtre d'organisation
val filteredTasks = database.taskDao().getTasksByOrganization(1)
```

---

### **Param√®tres de type cha√Æne (String)**
Pour rechercher des √©l√©ments par correspondance partielle, vous pouvez utiliser l'op√©rateur SQL `LIKE`.

#### Exemple :
```kotlin
@Dao
interface TaskDao {
    @Query("SELECT * FROM tasks WHERE title LIKE :titlePattern")
    fun getTasksByTitle(titlePattern: String): List<Task>
}
```

#### Utilisation :
```kotlin
// Rechercher les titres contenant "meeting"
val tasks = database.taskDao().getTasksByTitle("%meeting%")
tasks.forEach { task ->
    println("Task: ${task.title}")
}
```

---

### **Requ√™te avec tri personnalis√©**
Si vous voulez une requ√™te avec un param√®tre qui d√©termine l'ordre des r√©sultats (par exemple, tri ascendant ou descendant), vous pouvez le passer dynamiquement.

#### Exemple :
```kotlin
@Dao
interface TaskDao {
    @Query("SELECT * FROM tasks ORDER BY importance COLLATE NOCASE :order")
    fun getTasksSortedByImportance(order: String): List<Task>
}
```

#### Utilisation :
```kotlin
val tasksAscending = database.taskDao().getTasksSortedByImportance("ASC")
val tasksDescending = database.taskDao().getTasksSortedByImportance("DESC")
```

---

### **R√©sum√© des bonnes pratiques :**
1. Utilisez **param√®tres nomm√©s** dans les requ√™tes (par exemple, `:parameterName`).
2. Passez plusieurs param√®tres pour des requ√™tes complexes (par exemple, `orgId`, `importance`).
3. Utilisez `LIKE` pour des recherches textuelles flexibles.
4. G√©rez les param√®tres facultatifs avec des requ√™tes dynamiques (par exemple, `IS NULL`).
5. Room g√®re automatiquement l'√©chappement des param√®tres pour √©viter les probl√®mes de s√©curit√© SQL (comme l'injection SQL).

Si vous avez un exemple sp√©cifique ou une query √† construire, dites-le-moi ! üòä